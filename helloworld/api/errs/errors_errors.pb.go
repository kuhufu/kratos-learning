// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errs

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNKNOWN.String() && e.Code == 200
}

// 未知错误
func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

// 内部错误
func IsInternal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL.String() && e.Code == 500
}

// 内部错误
func ErrorInternal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL.String(), fmt.Sprintf(format, args...))
}

// 参数错误
func IsParameter(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARAMETER.String() && e.Code == 200
}

// 参数错误
func ErrorParameter(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_PARAMETER.String(), fmt.Sprintf(format, args...))
}

// 业务错误
func IsBusiness(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BUSINESS.String() && e.Code == 405
}

// 业务错误
func ErrorBusiness(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_BUSINESS.String(), fmt.Sprintf(format, args...))
}
